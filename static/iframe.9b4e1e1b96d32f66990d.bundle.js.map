{"version":3,"file":"static/iframe.9b4e1e1b96d32f66990d.bundle.js","sources":["webpack:///./app/components/shared/Money.tsx"],"sourcesContent":["import BigNumber from \"bignumber.js\";\nimport * as cn from \"classnames\";\nimport * as React from \"react\";\n\nimport { MONEY_DECIMALS } from \"../../config/constants\";\nimport { formatMoney } from \"../../utils/Money.utils\";\nimport { NumberFormat } from \"./NumberFormat\";\n\nimport * as styles from \"./Money.module.scss\";\n\nenum ECurrencySymbol {\n  SYMBOL = \"symbol\",\n  CODE = \"code\",\n  NONE = \"none\",\n}\n\nenum ECurrency {\n  NEU = \"neu\",\n  EUR = \"eur\",\n  EUR_TOKEN = \"eur_t\",\n  ETH = \"eth\",\n}\n\nenum EMoneyFormat {\n  WEI = \"wei\",\n  FLOAT = \"float\",\n}\n\nenum EMoneyTransfer {\n  INCOME = styles.income,\n  OUTCOME = styles.outcome,\n}\n\nenum ETheme {\n  GREEN = styles.tGreen,\n  ORANGE = styles.tOrange,\n  GREEN_BIG = styles.tBigValue,\n}\n\ninterface IOwnProps extends React.HTMLAttributes<HTMLSpanElement> {\n  currency: ECurrency;\n  value?: React.ReactElement<any> | string | BigNumber | number | null;\n  format?: EMoneyFormat;\n  currencySymbol?: ECurrencySymbol;\n  currencyClassName?: string;\n  transfer?: EMoneyTransfer;\n  theme?: ETheme;\n  /**\n   * Use to represent token price (value is set to 8 decimal places)\n   */\n  isPrice?: boolean;\n}\n\ntype IProps = IOwnProps;\n\nconst selectDecimalPlaces = (currency: ECurrency, isPrice?: boolean): number => {\n  if (isPrice) {\n    return 8;\n  }\n\n  switch (currency) {\n    case ECurrency.ETH:\n    case ECurrency.NEU:\n      return 4;\n    case ECurrency.EUR:\n    case ECurrency.EUR_TOKEN:\n      return 2;\n  }\n};\n\nconst selectCurrencyCode = (currency: ECurrency): string => {\n  switch (currency) {\n    case ECurrency.ETH:\n      return \"ETH\";\n    case ECurrency.NEU:\n      return \"NEU\";\n    case ECurrency.EUR:\n      return \"EUR\";\n    case ECurrency.EUR_TOKEN:\n      return \"nEUR\";\n  }\n};\n\nconst selectCurrencySymbol = (currency: ECurrency): string => {\n  switch (currency) {\n    case ECurrency.EUR:\n      return \"â‚¬\";\n    default:\n      throw new Error(\"Only EUR can be displayed as a symbol\");\n  }\n};\n\nfunction getFormatDecimals(format: EMoneyFormat): number {\n  switch (format) {\n    case EMoneyFormat.WEI:\n      return MONEY_DECIMALS;\n    case EMoneyFormat.FLOAT:\n      return 0;\n    default:\n      throw new Error(\"Unsupported money format\");\n  }\n}\n\nexport function getFormattedMoney(\n  value: string | number | BigNumber,\n  currency: ECurrency,\n  format: EMoneyFormat,\n  isPrice?: boolean,\n): string {\n  return formatMoney(value, getFormatDecimals(format), selectDecimalPlaces(currency, isPrice));\n}\n\nconst Money: React.FunctionComponent<IProps> = ({\n  value,\n  format = EMoneyFormat.WEI,\n  currency,\n  currencyClassName,\n  transfer,\n  currencySymbol = ECurrencySymbol.CODE,\n  theme,\n  isPrice,\n  ...props\n}) => {\n  if (!value) {\n    return <>-</>;\n  }\n\n  const money =\n    (format === EMoneyFormat.WEI && !React.isValidElement(value)) || isPrice\n      ? getFormattedMoney(value as BigNumber, currency, format, isPrice)\n      : value;\n\n  const formattedMoney = !React.isValidElement(money) ? (\n    <NumberFormat value={money as string} />\n  ) : (\n    money\n  );\n  return (\n    <span {...props} className={cn(styles.money, transfer, props.className, theme)}>\n      {currencySymbol === ECurrencySymbol.SYMBOL && (\n        <span className={cn(styles.currency, currencyClassName)}>\n          {selectCurrencySymbol(currency)}\n        </span>\n      )}\n      <span className={cn(styles.value)}>{formattedMoney}</span>\n      {currencySymbol === ECurrencySymbol.CODE && (\n        <span className={cn(styles.currency, currencyClassName)}>\n          {\" \"}\n          {selectCurrencyCode(currency)}\n        </span>\n      )}\n    </span>\n  );\n};\n\nexport {\n  Money,\n  selectCurrencySymbol,\n  selectCurrencyCode,\n  selectDecimalPlaces,\n  EMoneyTransfer,\n  EMoneyFormat,\n  ECurrency,\n  ECurrencySymbol,\n  ETheme,\n};\n"],"mappings":"AAUA","sourceRoot":""}